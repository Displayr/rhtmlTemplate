// Generated by CoffeeScript 1.8.0
var Template,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Template = (function(_super) {
  __extends(Template, _super);

  function Template(el, width, height) {
    Template.__super__.constructor.call(this, el, width, height);
    this._initializeState({
      selected: null
    });
    this.defaultColors = ['red', 'blue', 'green', 'orange'];
  }

  Template.prototype._processConfig = function() {
    console.log('_processConfig. Change this function in your rhtmlWidget');
    console.log('the config has already been added to the context at @config, you must now "process" it');
    console.log('@config');
    console.log(this.config);
    if (_.has(this.config, 'colors')) {
      console.log("custom");
      if (!_.isArray(this.config.colors)) {
        throw new Error("Invalid config. 'colors' must be array");
      }
      if (this.config.colors.length < 1) {
        throw new Error("Invalid config. 'colors' array must be > 0");
      }
      return this.colors = this.config.colors;
    } else {
      return this.colors = this.defaultColors;
    }
  };

  Template.prototype._getColor = function(index) {
    return this.colors[index % this.colors.length];
  };

  Template.prototype._redraw = function() {
    var allCells, data, enteringCells;
    console.log('_redraw. Change this function in your rhtmlWidget');
    console.log('the outer SVG has already been created and added to the DOM. You should do things with it');
    console.log(this.outerSvg);
    data = [
      {
        color: this._getColor(0),
        name: this._getColor(0),
        x: 0,
        y: 0
      }, {
        color: this._getColor(1),
        name: this._getColor(1),
        x: this.initialWidth / 2,
        y: 0
      }, {
        color: this._getColor(2),
        name: this._getColor(2),
        x: 0,
        y: this.initialHeight / 2
      }, {
        color: this._getColor(3),
        name: this._getColor(3),
        x: this.initialWidth / 2,
        y: this.initialHeight / 2
      }
    ];
    allCells = this.outerSvg.selectAll('.node').data(data);
    enteringCells = allCells.enter().append('g').attr('class', 'node').attr('transform', function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
    enteringCells.append('rect').attr('width', this.initialWidth / 2).attr('height', this.initialHeight / 2).attr('class', 'rect');
    enteringCells.append('text').attr('class', function(d) {
      return 'text';
    });
    this._updateText();
    return this._updateRectangles();
  };

  Template.prototype._updateText = function() {
    var allTexts;
    return allTexts = this.outerSvg.selectAll('.text').attr('x', (function(_this) {
      return function(d) {
        return _this.initialWidth / 4;
      };
    })(this)).attr('y', (function(_this) {
      return function(d) {
        return _this.initialHeight / 4;
      };
    })(this)).style('text-anchor', 'middle').style('alignment-baseline', 'central').style('dominant-baseline', 'central').style('fill', 'white').style('font-weight', (function(_this) {
      return function(d) {
        if (d.name === _this.state.selected) {
          return 900;
        }
        return 200;
      };
    })(this)).style('font-size', (function(_this) {
      return function(d) {
        if (d.name === _this.state.selected) {
          return 60;
        }
        return 18;
      };
    })(this)).text(function(d) {
      return d.name;
    }).attr('class', function(d) {
      return "text " + d.name;
    }).on('click', (function(_this) {
      return function(d) {
        return _this.partialStateUpdate('selected', d.name);
      };
    })(this));
  };

  Template.prototype._updateRectangles = function() {
    var allRects;
    return allRects = this.outerSvg.selectAll('.rect').attr('class', function(d) {
      return "rect " + d.name;
    }).attr('fill', (function(_this) {
      return function(d) {
        return d.color;
      };
    })(this)).attr('stroke', 'black').attr('stroke-width', (function(_this) {
      return function(d) {
        if (d.name === _this.state.selected) {
          return 6;
        }
        return 0;
      };
    })(this)).on('click', (function(_this) {
      return function(d) {
        return _this.partialStateUpdate('selected', d.name);
      };
    })(this));
  };

  return Template;

})(RhtmlSvgWidget);
